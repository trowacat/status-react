pipeline {
  agent {
    docker {
      label 'linux'
      image 'statusteam/nix:jenkins-1.0.0-e20e5e15'
      args (
        "-v /tmp/Android/Sdk:/home/jenkins/.status/Android/Sdk:rw "+
        "-v /var/tmp/lein:/var/tmp/lein:rw "+
        "-v /var/tmp/npm:/var/tmp/npm:rw "
      )
    }
  }

  parameters {
    string(
      name: 'BUILD_TYPE',
      description: 'Specify build type. Values: pr / nightly / release',
      defaultValue: 'pr',
    )
  }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 40, unit: 'MINUTES')
    /* Limit builds retained */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '20',
      artifactNumToKeepStr: '10',
    ))
  }

  /**
   * WARNING: Jenkins ignores PATH changes in Docker
   * https://issues.jenkins-ci.org/browse/JENKINS-49076
   **/
  environment {
    TARGET_PLATFORM = 'linux'
    LANG = 'en_US.UTF-8'
    LANGUAGE = 'en_US.UTF-8'
    LC_ALL = 'en_US.UTF-8'
    NPM_CONFIG_CACHE = '/var/tmp/npm'
    CI_ENVIRONMENT = 'jenkins'
    LEIN_HOME = '/var/tmp/lein'
    NIX_CONF_DIR = "${env.WORKSPACE}/nix"
    VERBOSE_LEVEL = '3'
  }

  stages {
    stage('Prep') {
      steps {
        script {
          /* Necessary to load methods */
          desktop = load 'ci/desktop.groovy'
          cmn     = load 'ci/common.groovy'
          btype   = cmn.utils.getBuildType()
          print "Running ${btype} build!"
          cmn.ci.abortPreviousRunningBuilds()
          /* Cleanup and Prep */
          cmn.prep(btype)
        }
      }
    }
    stage('Lint') {
      steps {
        script { cmn.utils.nix_sh('lein cljfmt check') }
      }
    }
    stage('Tests') {
      steps {
        script { cmn.utils.nix_sh('lein test-cljs') }
      }
    }
    stage('Build') {
      steps {
        script { desktop.buildClojureScript() }
      }
    }
    stage('Compile') {
      steps {
        script { desktop.compile() }
      }
    }
    stage('Bundle') {
      steps {
        script { app = desktop.bundleLinux(btype) }
      }
    }
    stage('Archive') {
      steps {
        archiveArtifacts app
      }
    }
    stage('Upload') {
      steps {
        script { env.PKG_URL = cmn.utils.uploadArtifact(app) }
      }
    }
    stage('Cleanup') {
      steps {
        sh 'make clean'
      }
    }
  }
  post {
    success { script { load('ci/common.groovy').notifyPR(true) } }
    failure { script { load('ci/common.groovy').notifyPR(false) } }
  }
}
